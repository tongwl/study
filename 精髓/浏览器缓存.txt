1.<meta http-equiv="pragma" content="no-cache"/>  
上述代码的作用是告诉浏览器当前页面不被缓存，每次访问都需要去服务器拉取。
但是标签式的缓存兼容性有问题，所有的缓存代理服务器都不支持，因为代理不会去解析html内容本身。

1.浏览器缓存就是把一个已经请求过的Web资源(如html页面、图片、css、js等数据)复制一份副本存储在浏览器中。
浏览器是依靠请求头和响应头信息来控制缓存的：

Expires:(HTTP1.0 响应头）浏览器的过期时间(服务器时间)，告诉浏览器在此时间之前可以使用副本。
存在的问题：服务器时间与客户端时间的不一致，就会导致缓存跟期待效果出现偏差。

Pragma:no-cache (HTTP1.0)，告诉浏览器忽略资源的缓存副本，从服务器获取(HTTP1.1可用Cache-Control代替)
Cache-Control(HTTP1.1)：no-cache（告诉浏览器忽略副本，直接从服务器获取）
			no-store（告诉浏览器不要存储副本）
			max-age=1000  （缓存副本的有效时长是1000秒，单位是秒，max-age会覆盖掉Expires）
					max-age是一个相对时间，即使客户端时间发生改变，也不会有Expires的问题。
		

			s-maxage: 只用于共享缓存，比如CDN缓存（s -> share）。与max-age 的区别是：max-age用于普通缓存，
				  而s-maxage用于代理缓存。如果存在s-maxage,则会覆盖max-age 和 Expires.
			public：响应会被缓存，并且在多用户间共享。默认是public。
　　			private： 响应只作为私有的缓存，不能在用户间共享。如果要求HTTP认证，响应会自动设置为private。

Last-Modified：告诉浏览器当前资源最后的修改时间
If-Modified-Since：如果浏览器第一次请求时响应的Last-Modified非空，第二次请求统一资源时，会把它作为该项的值发给服务器，进行对比，如果相同就会返回304.
Etag：(HTTP1.1)告诉浏览器当前资源在服务器的唯一标识符(生成规则由服务器决定)
If-None-Match：如果浏览器第一次请求时响应中Etag非空，第二次请求统一资源时，会把它作为该项的值发给服务器，进行对比，如果相同就会返回304.

Vary:Accept-Encoding (辅助) 辅助从多个缓存副本中刷选合适的版本(不同压缩算法产生的副本)
 



Cache-Control和Expires:
都是指当前资源的有效期，控制浏览器是否直接从浏览器缓存取数据还是重新发请求到服务器取数据。Cache-Control的选择更加多，设置更加细致，如果同时设置，其优先级高于Expires。


Last-Modified/ETag 和 Cache-Control/Expires
配置Last-Modified/ETag的情况下，浏览器再次访问统一URI的资源，还是会发送请求到服务器询问文件是否已经修改，如果没有，服务器会发送一个304给浏览器，告诉浏览器直接从自己本地的缓存取数据。如果资源修改过，就会从服务器拿，而不是304。


Cache-Control/Expires则不同，如果检测到本地的缓存还是在有效的时间范围内，浏览器直接使用本地副本，不会发送任何请求。如果和Last-Modified/ETag一起使用，Cache-Control/Expires的优先级要高于Last-Modified/ETag。也就是说当本地副本根据Cache-Control/Expires发现还是在有效期内，就会从本地副本获取，而不会发送请求给服务器。
一般情况下都是使用Cache-Control/Expires 配合Last-Modified/ETag一起使用，因为即使服务器设置缓存的时间，当用户点击"刷新"按钮时，浏览器会忽略缓存继续向服务器发送请求，这时Last-Modified/ETag将能够很好的利用304，从而减少响应开销。


Last-Modified和ETag
Last-Modified标注的最后修改只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的新鲜度
如果某些文件会被定期生成，当有时内容并没有任何变化，但Last-Modified却改变了，导致文件没法使用缓存
有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形

ETag是服务器自动生成或则由开发者生成的对应资源在服务器端的唯一标识符，能够更加准确的控制缓存。Last-Modified和ETag一起使用，服务器优先验证ETag,一致的情况下，才会继续对比Last-Modified，最后才决定是否返回304。

用户操作	Cache-Control/Expires	Last_Modified/ETag
地址栏回车	有效			有效
页面连接跳转	有效			有效	
新开窗口	有效			有效
前景后退	有效			有效
F5刷新		无效			有效
Ctrl+F5（强制刷新）无效			无效




扩展：html5引入了manifest文件缓存，可以实现缓存web应用，可以在没有因特网连接时进行访问。(需要对服务器进行配置，添加Manifest文件)
应用程序缓存为引用带来三个优势：
离线浏览 - 用户可在应用离线时使用它们
速度 - 已缓存资源加载得更快
减少服务器负载 - 浏览器将只从服务器下载更新过或更改过的资源。

问题：就目前HTML5提供的manifest机制来讲，一个页面只能引用一个manifest页面，而且一旦发现这个manifest改变了，就会把里面所有定义的缓存文件全部重新拉取一遍，不管实际上有没有更新，控制比较不灵活。


不能被缓存的：
HTTP信息头中包含Cache-Control:no-cache，pragma:no-cache，或Cache-Control:max-age=0等告诉浏览器不用缓存的请求
需要根据Cookie，认证信息等决定输入内容的动态请求是不能被缓存的
经过HTTPS安全加密的请求（有人也经过测试发现，ie其实在头部加入Cache-Control：max-age信息，firefox在头部加入Cache-Control:Public之后，能够对HTTPS的资源进行缓存，参考《HTTPS的七个误解》）
POST请求无法被缓存
HTTP响应头中不包含Last-Modified/Etag，也不包含Cache-Control/Expires的请求无法被缓存



--CDN缓存--：

CDN通俗点，就是当我们发送一个web请求时，会先经过它一道手，然后它帮我们计算路径，去哪得到这些东东（representations）的路径短且快。这个是网站管理员部署的，所以他们也可以将大家经常访问的representations放在CDN里，这样，就响应就更快了。


--代理服务器缓存--：

代理服务器缓存，其实跟下面即将讲的浏览器缓存性质差不多，差别就是代理服务器缓存面向的群体更广，规模更大而已。即，它不只为一个用户服务，一般为大量用户提供服务，同一个副本会被重用多次,因此在减少相应时间和带宽使用方面很有效。

--浏览器缓存--：

简而言之，就是，每个浏览器都实现了 HTTP 缓存，我们通过浏览器使用HTTP协议与服务器交互的时候，浏览器就会根据一套与服务器约定的规则进行缓存工作。当我们点击浏览器上‘后退’或者‘前进’按钮时，显得特别有用。